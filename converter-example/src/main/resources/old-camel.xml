<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:camel="http://camel.apache.org/schema/spring"
  xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd     http://camel.apache.org/schema/spring     http://camel.apache.org/schema/spring/camel-spring.xsd     http://www.springframework.org/schema/util      http://www.springframework.org/schema/util/spring-util.xsd     ">
  <bean class="org.apache.camel.dataformat.zipfile.ZipSplitter" id="zipSplitter"/>
  <util:list id="gtfs_master_data">
    <value>gtfs_master_data.ttl</value>
  </util:list>
  <util:list id="gtfs_ontology">
    <value>package:it.cefriel.gtfs.model</value>
  </util:list>
  <util:list id="gtfs_rules">
    <value>classpath://gtfs.shacl</value>
  </util:list>
  <util:list id="netex_rules">
    <value>classpath://netex.shacl</value>
  </util:list>
  <util:list id="businesscore_rules">
    <value>classpath://businesscore.shacl</value>
  </util:list>
  <!-- RDF processing components -->
  <bean class="it.cefriel.chimaera.processor.DataEnricher" id="masterDataEnricher"/>
  <bean class="it.cefriel.chimaera.processor.ModelEnricher" id="modelEnricher"/>
  <bean class="it.cefriel.chimaera.processor.LiftingProcessor" id="lifter"/>
  <bean class="it.cefriel.chimaera.processor.LoweringProcessor" id="lowerer"/>
  <bean class="it.cefriel.chimaera.processor.ShaclProcessor" id="shacl"/>
  <bean class="it.cefriel.chimaera.processor.SemanticLoader" id="rdfparser"/>
  <bean class="it.cefriel.chimaera.processor.StopProcessor" id="quit"/>
  <camelContext id="camelContext-84056c78-425f-40c3-8f63-663dc28ed35d" trace="true" xmlns="http://camel.apache.org/schema/spring">
    <!-- Data format for marshalling/unmarshalling -->
    <camel:dataFormats>
      <camel:jaxb contextPath="org.rutebanken.netex.model" id="netexJaxb" objectFactory="true" prettyPrint="true"/>
    </camel:dataFormats>
    <!-- GTFS input route -->
    <camel:route autoStartup="false" id="bindy-zipped-gtfs">
      <camel:from id="_from1" uri="file:inbox/gtfs?noop=true"/>
      <camel:log id="_log1" loggingLevel="WARN" message="GTFS conversion"/>
      <camel:split id="_split1" streaming="true">
        <ref>zipSplitter</ref>
        <!-- <camel:log message="Entry ${file:name}: ${body}" loggingLevel="DEBUG" /> -->
        <convertBodyTo id="_convertBodyTo1" type="String"/>
        <camel:doTry id="_doTry1">
          <camel:choice id="_choice1">
            <camel:when id="_when1">
              <camel:simple>${file:name} == "agency.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal1">
                <camel:bindy classType="it.cefriel.gtfs.model.Agency" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when2">
              <camel:simple>${file:name} == "stops.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal2">
                <camel:bindy classType="it.cefriel.gtfs.model.Stop" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when3">
              <camel:simple>${file:name} == "routes.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal3">
                <camel:bindy classType="it.cefriel.gtfs.model.Route" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when4">
              <camel:simple>${file:name} == "trips.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal4">
                <camel:bindy classType="it.cefriel.gtfs.model.Trip" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when5">
              <camel:simple>${file:name} == "stop_times.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal5">
                <camel:bindy classType="it.cefriel.gtfs.model.StopTime" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when6">
              <camel:simple>${file:name} == "calendar.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal6">
                <camel:bindy classType="it.cefriel.gtfs.model.ServiceCalendar" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when7">
              <camel:simple>${file:name} == "calendar_dates.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal7">
                <camel:bindy classType="it.cefriel.gtfs.model.ServiceCalendarDate" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when8">
              <camel:simple>${file:name} == "fare_attributes.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal8">
                <camel:bindy classType="it.cefriel.gtfs.model.FareAttribute" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when9">
              <camel:simple>${file:name} == "fare_rules.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal9">
                <camel:bindy classType="it.cefriel.gtfs.model.FareRule" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when10">
              <camel:simple>${file:name} == "shapes.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal10">
                <camel:bindy classType="it.cefriel.gtfs.model.ShapePoint" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when11">
              <camel:simple>${file:name} == "frequencies.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal11">
                <camel:bindy classType="it.cefriel.gtfs.model.Frequency" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when12">
              <camel:simple>${file:name} == "transfers.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal12">
                <camel:bindy classType="it.cefriel.gtfs.model.Transfer" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
            <camel:when id="_when13">
              <camel:simple>${file:name} == "feed_info.txt"</camel:simple>
              <camel:unmarshal id="_unmarshal13">
                <camel:bindy classType="it.cefriel.gtfs.model.FeedInfo" type="Csv"/>
              </camel:unmarshal>
            </camel:when>
          </camel:choice>
          <camel:doCatch id="_doCatch1">
            <camel:exception>java.lang.IllegalArgumentException</camel:exception>
            <camel:onWhen>
              <camel:simple>${exception.message} contains 'No records have been defined in the CSV'</camel:simple>
            </camel:onWhen>
          </camel:doCatch>
        </camel:doTry>
        <camel:log id="_log8" loggingLevel="INFO" message="Entry extracted"/>
        <camel:choice id="_choice2">
          <camel:when id="_when14">
            <camel:simple>${body} != null</camel:simple>
            <camel:to id="_to1" uri="seda:gtfs_source_channel"/>
          </camel:when>
          <camel:otherwise id="_otherwise1">
            <camel:log id="_log2" loggingLevel="WARN" message="$simple{file:name} is empty"/>
          </camel:otherwise>
        </camel:choice>
      </camel:split>
      <camel:log id="_log3" loggingLevel="WARN" message="COMPLETED GTFS conversion"/>
    </camel:route>
    <camel:route autoStartup="false" id="gtfs_in">
      <camel:from id="_from2" uri="seda:gtfs_source_channel"/>
      <camel:setHeader headerName="source_standard" id="_setHeader1">
        <camel:constant>it.cefriel.gtfs.model</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="default_ns" id="_setHeader2">
        <camel:constant>http://www.cefriel.it/chimaera/gtfs#</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="master_data" id="_setHeader3">
        <camel:simple>ref:gtfs_master_data</camel:simple>
      </camel:setHeader>
      <camel:setHeader headerName="ontologies" id="_setHeader4">
        <camel:simple>ref:gtfs_ontology</camel:simple>
      </camel:setHeader>
      <camel:setHeader headerName="shacl_rules" id="_setHeader5">
        <camel:simple>ref:gtfs_rules</camel:simple>
      </camel:setHeader>
      <camel:to id="_to2" uri="seda:in_object_ch"/>
    </camel:route>
    <!-- NeTEx input route -->
    <camel:route autoStartup="false" id="netex_in">
      <camel:from id="_from3" uri="file:inbox/netex?noop=true"/>
      <camel:log id="_log4" loggingLevel="WARN" message="Unmarshalling..."/>
      <camel:unmarshal id="_unmarshal14" ref="netexJaxb"/>
      <camel:setHeader headerName="source_standard" id="_setHeader6">
        <camel:constant>org.rutebanken.netex.model</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="default_ns" id="_setHeader7">
        <camel:constant>http://www.cefriel.it/chimaera/netex#</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="master_data" id="_setHeader8">
        <camel:simple>ref:netex_master_data</camel:simple>
      </camel:setHeader>
      <camel:setHeader headerName="ontologies" id="_setHeader9">
        <camel:simple>ref:netex_ontology</camel:simple>
      </camel:setHeader>
      <camel:setHeader headerName="shacl_rules" id="_setHeader10">
        <camel:simple>ref:netex_rules</camel:simple>
      </camel:setHeader>
      <camel:to id="_to3" uri="seda:in_object_ch"/>
    </camel:route>
    <!-- Business Core Vocabulary input route -->
    <camel:route autoStartup="true" id="businesscore_in">
      <!--  Route settings -->
      <!--  Transformation process -->
      <camel:from id="_from5" uri="file:inbox/businesscore?noop=true"/>
      <camel:log id="_log9" loggingLevel="WARN" message="Starting BusinessCore conversion"/>
      <camel:process id="_process2" ref="rdfparser"/>
      <camel:setHeader headerName="default_ns" id="_setHeader12">
        <camel:constant>http://www.cefriel.it/ontologies/netex#</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="shacl_rules" id="_setHeader13">
        <camel:simple>ref:businesscore_rules</camel:simple>
      </camel:setHeader>
      <camel:setHeader headerName="destination_standard" id="_setHeader14">
        <camel:constant>org.rutebanken.netex.model</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="object_id" id="_setHeader15">
        <camel:constant>https://opencorporates.com/id/companies/fr/521178327</camel:constant>
      </camel:setHeader>
      <camel:doTry id="_doTry2">
        <camel:process id="_process3" ref="shacl"/>
        <camel:process id="_process4" ref="lowerer"/>
        <camel:doCatch id="_doCatch2">
          <camel:exception>java.lang.Throwable</camel:exception>
          <camel:log id="_log10" loggingLevel="ERROR" message="${exception.stacktrace}"/>
          <camel:process id="_process5" ref="quit"/>
        </camel:doCatch>
      </camel:doTry>
      <camel:log id="_log11" loggingLevel="WARN" message="SHACL BusinessCore Conversion completed"/>
    </camel:route>
    <!-- NeTEx semantic processing route -->
    <camel:route id="to_netex">
      <!-- <camel:process ref="modelEnricher" /> -->
      <!--<camel:process ref="masterDataEnricher" /> <camel:process ref="modelEnricher" /> <camel:process ref="shacl" /> <camel:process ref="lowerer" /> -->
      <camel:from id="_from4" uri="seda:in_object_ch"/>
      <camel:log id="_log5" loggingLevel="WARN" message="Header $simple{in.headers}"/>
      <camel:log id="_log6" loggingLevel="WARN" message="Starting conversion"/>
      <camel:process id="_process1" ref="lifter"/>
      <camel:process id="_process6" ref="shacl"/>
      <camel:log id="_log7" loggingLevel="WARN" message="Conversion completed"/>
    </camel:route>
    <!-- Experimental WSO2 authentication route -->
    <camel:route autoStartup="false" id="wso2_auth">
      <camel:from id="_from6" uri="timer://startup?repeatCount=1"/>
      <camel:setBody id="_setBody1">
        <camel:constant>
                
                --__MyCoolBoundary__
                Content-Disposition: form-data; name="username"
            
                admin
                --__MyCoolBoundary__
                Content-Disposition: form-data; name="password"
            
                admin
                --__MyCoolBoundary__--
                
                </camel:constant>
      </camel:setBody>
      <camel:setHeader headerName="Content-Type" id="_setHeader16">
        <camel:constant>multipart/form-data; boundary="__MyCoolBoundary__"</camel:constant>
      </camel:setHeader>
      <camel:setHeader headerName="CamelHttpMethod" id="_setHeader11">
        <camel:constant>POST</camel:constant>
      </camel:setHeader>
      <camel:log id="_log12" loggingLevel="INFO" message="Calling WSO2 auth"/>
      <camel:to id="_to4" uri="https4://localhost:9443/store/apis/authenticate"/>
      <camel:log id="_log13" loggingLevel="INFO" message="WSO2 auth response: ${out.body}"/>
    </camel:route>
  </camelContext>
</beans>
