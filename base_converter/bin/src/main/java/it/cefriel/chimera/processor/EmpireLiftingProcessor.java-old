/*
 * Copyright 2018 Cefriel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package it.cefriel.chimaera.processor;

import java.net.URI;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Persistence;

import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.Processor;
import org.apache.jena.rdf.model.Model;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;

import com.clarkparsia.empire.Empire;
import com.clarkparsia.empire.SupportsRdfId;
import com.clarkparsia.empire.SupportsRdfId.RdfKey;
import com.clarkparsia.empire.jena.JenaDataSource;
import com.clarkparsia.empire.jena.JenaEmpireModule;
import com.clarkparsia.empire.jena.util.JenaSesameUtils;
import com.complexible.pinto.MappingOptions;
import com.complexible.pinto.RDFMapper;

public class EmpireLiftingProcessor  implements Processor{
    private String defaultNS=null;
    private static  EntityManager aManager;
    private static String OBJ_ID="object_id";
    private static String DEFAULT_NS="default_ns";

    public void process(Exchange exchange) throws Exception {
        int obj_suffix;
        String obj_id=null; 
        
        Model tmp_model=null;
        Model output=null;
        String namespace=null;
        // read empire config from framework.config.properties file in /resources
        System.setProperty("empire.configuration.file", "framework.config.properties");
        Empire.init(new JenaEmpireModule());
        aManager =  Persistence.createEntityManagerFactory("converter").createEntityManager();
        JenaDataSource aSource = (JenaDataSource) aManager.getDelegate();
        Message msg=exchange.getIn();
        Object raw_input=msg.getBody();
        namespace=msg.getHeader(DEFAULT_NS, String.class);

        if (namespace==null)
            namespace=defaultNS;

        if (raw_input instanceof List) {
            List objects=(List) raw_input;
            output=aSource.getModel();
            for (Object o: objects) {
                obj_suffix=System.identityHashCode(raw_input);
                obj_id=namespace+raw_input.getClass().getTypeName()+"_"+obj_suffix;

                tmp_model=lift_data(obj_id, o, namespace, aSource);
                output.add(tmp_model);
            }
        }
        else {
            obj_suffix=System.identityHashCode(raw_input);
            obj_id=namespace+raw_input.getClass().getTypeName()+"_"+obj_suffix;
            output=lift_data(obj_id, raw_input, namespace, aSource);
            msg.setHeader(OBJ_ID, obj_id);
        }

        msg.setBody(output);

        output.write(System.out, "TURTLE");
        //System.out.println("Conversion of "+raw_input.getClass().getTypeName());
           
    }


    public String getDefaultNS() {
        return defaultNS;
    }

    public void setDefaultNS(String defaultNS) {
        this.defaultNS = defaultNS;
    }
    
    private Model lift_data(String obj_id, Object raw_input, String namespace, JenaDataSource aSource) {
        Model output=null;

        
        Map.Entry<String, Model> res=null;
        
        if (raw_input instanceof SupportsRdfId) {
            RdfKey primaryKey = new SupportsRdfId.URIKey(URI.create(obj_id));
            SupportsRdfId input_obj=(SupportsRdfId)raw_input;
            input_obj.setRdfId(primaryKey);

            //persist object instance to repository
            aManager.persist(raw_input.getClass().cast(input_obj));

            //RDFDataMgr.write(System.out, aSource.getModel(), Lang.TURTLE) ;
            output=aSource.getModel();

        } else {
            RDFMapper aMapper = RDFMapper.builder()
                    .namespace("", namespace)
                    .set(MappingOptions.SERIALIZE_COLLECTIONS_AS_LISTS, true)
                    .build();
            ValueFactory factory = SimpleValueFactory.getInstance();
            Map.Entry<String,org.eclipse.rdf4j.model.Model> persisted_obj=aMapper.writeValueId(raw_input.getClass().cast(raw_input), factory.createIRI(obj_id));

            output=JenaSesameUtils.asJenaModel(persisted_obj.getValue());
        }        
        return output;
    }

}
