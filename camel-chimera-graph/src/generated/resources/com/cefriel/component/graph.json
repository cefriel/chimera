{
  "component": {
    "kind": "component",
    "name": "graph",
    "title": "graph",
    "description": "Graph component",
    "deprecated": false,
    "firstVersion": "1.0.0",
    "label": "transformation",
    "javaType": "com.cefriel.component.GraphComponent",
    "supportLevel": "Stable",
    "groupId": "com.cefriel",
    "artifactId": "camel-chimera-graph",
    "version": "4.1.2-SNAPSHOT",
    "scheme": "graph",
    "extendsScheme": "",
    "syntax": "graph:name",
    "async": false,
    "api": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "remote": true
  },
  "componentProperties": {
    "bridgeErrorHandler": { "index": 0, "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "lazyStartProducer": { "index": 1, "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "autowiredEnabled": { "index": 2, "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." }
  },
  "properties": {
    "name": { "index": 0, "kind": "path", "displayName": "Name", "group": "common", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "This parameter contains the name of the endpoint" },
    "allRules": { "index": 1, "kind": "parameter", "displayName": "All Rules", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Parameter used to set certain InferenceRDFGraph rules" },
    "baseConfig": { "index": 2, "kind": "parameter", "displayName": "Base Config", "group": "common", "label": "", "required": false, "type": "object", "javaType": "com.cefriel.component.GraphBean", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to set the base configuration of this endpoint" },
    "baseIri": { "index": 3, "kind": "parameter", "displayName": "Base Iri", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "http:\/\/www.cefriel.com\/data\/", "description": "Parameter used to set the IRI of the graph you want to create" },
    "basePath": { "index": 4, "kind": "parameter", "displayName": "Base Path", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "This parameter contains the path of a file where you want to dump your graph" },
    "chimeraResource": { "index": 5, "kind": "parameter", "displayName": "Chimera Resource", "group": "common", "label": "", "required": false, "type": "object", "javaType": "com.cefriel.util.ChimeraResourceBean", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used wherever resources are needed" },
    "clear": { "index": 6, "kind": "parameter", "displayName": "Clear", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Parameter set to true if you want to remove a graph or certain parts of it" },
    "defaultGraph": { "index": 7, "kind": "parameter", "displayName": "Default Graph", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Parameter set to false if you don't want your graph to have a name" },
    "dumpFormat": { "index": 8, "kind": "parameter", "displayName": "Dump Format", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "This parameter contains a list with the path of all the part of a graph you want to remove" },
    "filename": { "index": 9, "kind": "parameter", "displayName": "Filename", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "This parameter contains the name of the file where you want to dump your graph" },
    "namedGraph": { "index": 10, "kind": "parameter", "displayName": "Named Graph", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Can be used to pass multiple named graphs separated by ';'" },
    "newGraph": { "index": 11, "kind": "parameter", "displayName": "New Graph", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Parameter set to true if you want to create a new graph with the result of a construct" },
    "ontologyFormat": { "index": 12, "kind": "parameter", "displayName": "Ontology Format", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to express the rdfFormat you want to parse to ontologies" },
    "pathDataDir": { "index": 13, "kind": "parameter", "displayName": "Path Data Dir", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to create a Native RDF Graph or an Inference RDF Graph" },
    "query": { "index": 14, "kind": "parameter", "displayName": "Query", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "This parameter contains a query that has to be applied to the graph" },
    "rdfFormat": { "index": 15, "kind": "parameter", "displayName": "Rdf Format", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "This parameter contains the rdfFormat you want to parse a file or an InputStream" },
    "repoOff": { "index": 16, "kind": "parameter", "displayName": "Repo Off", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Parameter set to true if you want to shut down the repo" },
    "repositoryID": { "index": 17, "kind": "parameter", "displayName": "Repository ID", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to create a HTTPRDFGraph" },
    "routeOff": { "index": 18, "kind": "parameter", "displayName": "Route Off", "group": "common", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Parameter set to true if you want to stop the route" },
    "serverUrl": { "index": 19, "kind": "parameter", "displayName": "Server Url", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to create a HTTPRDFGraph" },
    "sparqlEndpoint": { "index": 20, "kind": "parameter", "displayName": "Sparql Endpoint", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Parameter used to create a SPARQLEndpointGraph" },
    "bridgeErrorHandler": { "index": 21, "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "index": 22, "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "autowired": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "index": 23, "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut" ], "deprecated": false, "autowired": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "lazyStartProducer": { "index": 24, "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer (advanced)", "label": "producer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." }
  }
}
