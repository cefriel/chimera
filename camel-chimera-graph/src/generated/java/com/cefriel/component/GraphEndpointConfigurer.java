/* Generated by camel build tools - do NOT edit this file! */
package com.cefriel.component;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class GraphEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        GraphEndpoint target = (GraphEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allrules":
        case "allRules": target.setAllRules(property(camelContext, boolean.class, value)); return true;
        case "baseconfig":
        case "baseConfig": target.setBaseConfig(property(camelContext, com.cefriel.component.GraphBean.class, value)); return true;
        case "baseiri":
        case "baseIri": target.setBaseIri(property(camelContext, java.lang.String.class, value)); return true;
        case "basepath":
        case "basePath": target.setBasePath(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "chimeraresource":
        case "chimeraResource": target.setChimeraResource(property(camelContext, com.cefriel.util.ChimeraResourceBean.class, value)); return true;
        case "clear": target.setClear(property(camelContext, boolean.class, value)); return true;
        case "defaultgraph":
        case "defaultGraph": target.setDefaultGraph(property(camelContext, boolean.class, value)); return true;
        case "dumpformat":
        case "dumpFormat": target.setDumpFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filename": target.setFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "namedgraph":
        case "namedGraph": target.setNamedGraph(property(camelContext, java.lang.String.class, value)); return true;
        case "newgraph":
        case "newGraph": target.setNewGraph(property(camelContext, boolean.class, value)); return true;
        case "ontologyformat":
        case "ontologyFormat": target.setOntologyFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "pathdatadir":
        case "pathDataDir": target.setPathDataDir(property(camelContext, java.lang.String.class, value)); return true;
        case "query": target.setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "rdfformat":
        case "rdfFormat": target.setRdfFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "repooff":
        case "repoOff": target.setRepoOff(property(camelContext, boolean.class, value)); return true;
        case "repositoryid":
        case "repositoryID": target.setRepositoryID(property(camelContext, java.lang.String.class, value)); return true;
        case "routeoff":
        case "routeOff": target.setRouteOff(property(camelContext, boolean.class, value)); return true;
        case "serverurl":
        case "serverUrl": target.setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "sparqlendpoint":
        case "sparqlEndpoint": target.setSparqlEndpoint(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allrules":
        case "allRules": return boolean.class;
        case "baseconfig":
        case "baseConfig": return com.cefriel.component.GraphBean.class;
        case "baseiri":
        case "baseIri": return java.lang.String.class;
        case "basepath":
        case "basePath": return java.lang.String.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "chimeraresource":
        case "chimeraResource": return com.cefriel.util.ChimeraResourceBean.class;
        case "clear": return boolean.class;
        case "defaultgraph":
        case "defaultGraph": return boolean.class;
        case "dumpformat":
        case "dumpFormat": return java.lang.String.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "filename": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "namedgraph":
        case "namedGraph": return java.lang.String.class;
        case "newgraph":
        case "newGraph": return boolean.class;
        case "ontologyformat":
        case "ontologyFormat": return java.lang.String.class;
        case "pathdatadir":
        case "pathDataDir": return java.lang.String.class;
        case "query": return java.lang.String.class;
        case "rdfformat":
        case "rdfFormat": return java.lang.String.class;
        case "repooff":
        case "repoOff": return boolean.class;
        case "repositoryid":
        case "repositoryID": return java.lang.String.class;
        case "routeoff":
        case "routeOff": return boolean.class;
        case "serverurl":
        case "serverUrl": return java.lang.String.class;
        case "sparqlendpoint":
        case "sparqlEndpoint": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        GraphEndpoint target = (GraphEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allrules":
        case "allRules": return target.isAllRules();
        case "baseconfig":
        case "baseConfig": return target.getBaseConfig();
        case "baseiri":
        case "baseIri": return target.getBaseIri();
        case "basepath":
        case "basePath": return target.getBasePath();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "chimeraresource":
        case "chimeraResource": return target.getChimeraResource();
        case "clear": return target.isClear();
        case "defaultgraph":
        case "defaultGraph": return target.isDefaultGraph();
        case "dumpformat":
        case "dumpFormat": return target.getDumpFormat();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "filename": return target.getFilename();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "namedgraph":
        case "namedGraph": return target.getNamedGraph();
        case "newgraph":
        case "newGraph": return target.isNewGraph();
        case "ontologyformat":
        case "ontologyFormat": return target.getOntologyFormat();
        case "pathdatadir":
        case "pathDataDir": return target.getPathDataDir();
        case "query": return target.getQuery();
        case "rdfformat":
        case "rdfFormat": return target.getRdfFormat();
        case "repooff":
        case "repoOff": return target.isRepoOff();
        case "repositoryid":
        case "repositoryID": return target.getRepositoryID();
        case "routeoff":
        case "routeOff": return target.isRouteOff();
        case "serverurl":
        case "serverUrl": return target.getServerUrl();
        case "sparqlendpoint":
        case "sparqlEndpoint": return target.getSparqlEndpoint();
        default: return null;
        }
    }
}

