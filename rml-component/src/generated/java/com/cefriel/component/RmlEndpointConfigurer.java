/* Generated by camel build tools - do NOT edit this file! */
package com.cefriel.component;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class RmlEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        RmlEndpoint target = (RmlEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "baseiri":
        case "baseIri": target.setBaseIri(property(camelContext, java.lang.String.class, value)); return true;
        case "baseiriprefix":
        case "baseIriPrefix": target.setBaseIriPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "basepath":
        case "basePath": target.setBasePath(property(camelContext, java.lang.String.class, value)); return true;
        case "baseurl":
        case "baseUrl": target.setBaseUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "batchsize":
        case "batchSize": target.setBatchSize(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrency": target.setConcurrency(property(camelContext, java.lang.String.class, value)); return true;
        case "concurrentrecords":
        case "concurrentRecords": target.setConcurrentRecords(property(camelContext, boolean.class, value)); return true;
        case "concurrentwrites":
        case "concurrentWrites": target.setConcurrentWrites(property(camelContext, boolean.class, value)); return true;
        case "defaultrecordfactory":
        case "defaultRecordFactory": target.setDefaultRecordFactory(property(camelContext, boolean.class, value)); return true;
        case "emptystrings":
        case "emptyStrings": target.setEmptyStrings(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "functionfiles":
        case "functionFiles": target.setFunctionFiles(property(camelContext, com.cefriel.util.ChimeraResourcesBean.class, value)); return true;
        case "incrementalupdate":
        case "incrementalUpdate": target.setIncrementalUpdate(property(camelContext, boolean.class, value)); return true;
        case "inputfiles":
        case "inputFiles": target.setInputFiles(property(camelContext, com.cefriel.util.ChimeraResourcesBean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mappings": target.setMappings(property(camelContext, com.cefriel.util.ChimeraResourcesBean.class, value)); return true;
        case "nocache":
        case "noCache": target.setNoCache(property(camelContext, boolean.class, value)); return true;
        case "numthreadsrecords":
        case "numThreadsRecords": target.setNumThreadsRecords(property(camelContext, int.class, value)); return true;
        case "numthreadswrites":
        case "numThreadsWrites": target.setNumThreadsWrites(property(camelContext, int.class, value)); return true;
        case "ordered": target.setOrdered(property(camelContext, boolean.class, value)); return true;
        case "prefixlogicalsource":
        case "prefixLogicalSource": target.setPrefixLogicalSource(property(camelContext, java.lang.String.class, value)); return true;
        case "rmlbaseconfig":
        case "rmlBaseConfig": target.setRmlBaseConfig(property(camelContext, com.cefriel.component.RmlBean.class, value)); return true;
        case "singlerecordsfactory":
        case "singleRecordsFactory": target.setSingleRecordsFactory(property(camelContext, boolean.class, value)); return true;
        case "streamname":
        case "streamName": target.setStreamName(property(camelContext, java.lang.String.class, value)); return true;
        case "usemessage":
        case "useMessage": target.setUseMessage(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "baseiri":
        case "baseIri": return java.lang.String.class;
        case "baseiriprefix":
        case "baseIriPrefix": return java.lang.String.class;
        case "basepath":
        case "basePath": return java.lang.String.class;
        case "baseurl":
        case "baseUrl": return java.lang.String.class;
        case "batchsize":
        case "batchSize": return int.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "concurrency": return java.lang.String.class;
        case "concurrentrecords":
        case "concurrentRecords": return boolean.class;
        case "concurrentwrites":
        case "concurrentWrites": return boolean.class;
        case "defaultrecordfactory":
        case "defaultRecordFactory": return boolean.class;
        case "emptystrings":
        case "emptyStrings": return boolean.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "functionfiles":
        case "functionFiles": return com.cefriel.util.ChimeraResourcesBean.class;
        case "incrementalupdate":
        case "incrementalUpdate": return boolean.class;
        case "inputfiles":
        case "inputFiles": return com.cefriel.util.ChimeraResourcesBean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "mappings": return com.cefriel.util.ChimeraResourcesBean.class;
        case "nocache":
        case "noCache": return boolean.class;
        case "numthreadsrecords":
        case "numThreadsRecords": return int.class;
        case "numthreadswrites":
        case "numThreadsWrites": return int.class;
        case "ordered": return boolean.class;
        case "prefixlogicalsource":
        case "prefixLogicalSource": return java.lang.String.class;
        case "rmlbaseconfig":
        case "rmlBaseConfig": return com.cefriel.component.RmlBean.class;
        case "singlerecordsfactory":
        case "singleRecordsFactory": return boolean.class;
        case "streamname":
        case "streamName": return java.lang.String.class;
        case "usemessage":
        case "useMessage": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        RmlEndpoint target = (RmlEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "baseiri":
        case "baseIri": return target.getBaseIri();
        case "baseiriprefix":
        case "baseIriPrefix": return target.getBaseIriPrefix();
        case "basepath":
        case "basePath": return target.getBasePath();
        case "baseurl":
        case "baseUrl": return target.getBaseUrl();
        case "batchsize":
        case "batchSize": return target.getBatchSize();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "concurrency": return target.getConcurrency();
        case "concurrentrecords":
        case "concurrentRecords": return target.isConcurrentRecords();
        case "concurrentwrites":
        case "concurrentWrites": return target.isConcurrentWrites();
        case "defaultrecordfactory":
        case "defaultRecordFactory": return target.isDefaultRecordFactory();
        case "emptystrings":
        case "emptyStrings": return target.isEmptyStrings();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "functionfiles":
        case "functionFiles": return target.getFunctionFiles();
        case "incrementalupdate":
        case "incrementalUpdate": return target.isIncrementalUpdate();
        case "inputfiles":
        case "inputFiles": return target.getInputFiles();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "mappings": return target.getMappings();
        case "nocache":
        case "noCache": return target.isNoCache();
        case "numthreadsrecords":
        case "numThreadsRecords": return target.getNumThreadsRecords();
        case "numthreadswrites":
        case "numThreadsWrites": return target.getNumThreadsWrites();
        case "ordered": return target.isOrdered();
        case "prefixlogicalsource":
        case "prefixLogicalSource": return target.getPrefixLogicalSource();
        case "rmlbaseconfig":
        case "rmlBaseConfig": return target.getRmlBaseConfig();
        case "singlerecordsfactory":
        case "singleRecordsFactory": return target.isSingleRecordsFactory();
        case "streamname":
        case "streamName": return target.getStreamName();
        case "usemessage":
        case "useMessage": return target.isUseMessage();
        default: return null;
        }
    }
}

